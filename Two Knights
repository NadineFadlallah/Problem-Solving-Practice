/*
Problem source: https://cses.fi/problemset/list/
Goal: the number of ways two knights can be placed on a n*n chessboard so that they do not attack each other.

Approach: 1. finding the number of ways to put 2 chess pieces on n*n board (ignoring the fact that they might attack each other 
AND ignoring order).
and that's equal to n^2 choose k or "n^2Ck" = n!/(k!*(n^2-1)!)
by applying the formula: # of ways =  n^2C2 = n^2(n^2-1)/2

2. finding the number of ways that they might attack each other, and I found a formula for this by trying a couple of n*n boards on a paper
and at first I did consider the order, visualizing it a bit :D:

1  2  3  4 
5  6  7  8 
9 10 11 12
13 14 15 16

for 4*4 board: each number expresses the number of places it can attack, e.g.: at the upper left corner it can attack 2 places (7 & 10)
2 3 3 2
3 4 4 3
3 4 4 2
2 3 3 2

I kept trying this for n= [3-6] and I found some pattern:

for n=3 ==> 8 ways / (n-1 = 2) = 4
for n=4 ==> 48 ways / (n-1 = 3) = 12
for n=5 ==> 96 ways / (n-1 = 4) = 24
for n=6 ==> 160 ways / (n-1 = 5) = 32
after dividing each value by n-1 (don't ask why) we can see that they kept increasing by value of 8

So, the formula would be like: # of threat positions: 8/2 * (n-1) * (n-2)
where n-1 because I found this pattern when dividing by the proceeding value 
, n-2 because i found this patter starting from n=3
and 8/2 because I no longer considering the order of the 2 knights

3. I would subtract the two values to find the number of safe positions.
*/

#include <bits/stdc++.h>
typedef long long LL;
using namespace std;
int main()
{

LL n, blocks, threats;
cin>>n;


for(int i=1; i<=n; i++)
{
    LL temp = i*i;
    blocks = (temp*(temp-1))/2;
    threats = 4*(i-2)*(i-1);
    cout <<  blocks - threats << endl;

}
return 0;
}
